# PHP Redmine API

A simple PHP5 Object Oriented wrapper for GlobalSportsMedia (GSM) XML API.

See [http://client.globalsportsmedia.com/documentation](http://client.globalsportsmedia.com/documentation)

## Features

* Follows PSR-0 conventions and coding standard: autoload friendly
* API entry points implementation state :
 * OK soccer
 * OK am_football
 * OK aus_football
 * OK baseball
 * OK basketball
 * OK cricket
 * NOK golf
 * OK handball
 * OK hockey
 * NOK motorsports
 * OK rugby;
 * *NOK tennis - only partially implemented*
 * OK volleyball

Note : all the methods are declared, but those missing final implementation will throw a "this method does not exist" Exception.

## Requirements

* PHP >= 5.4 with [cURL](http://php.net/manual/en/book.curl.php) extension,

## Autoload

The first step to use `php-gsm-api` is to download/install [composer](http://getcomposer.org/):

```bash
$ curl -s http://getcomposer.org/installer | php
```

Then create a composer.json file in the root of your project:

```yaml
{
    "require": {
        ...
        "kbsali/gsm-api": "dev-master"
    }
}
```

... and install your dependencies using:
```bash
$ php composer.phar install
```

## Basic usage of `php-gsm-api` client following the basic workflow documented in [globalsportsmedia.com](http://client.globalsportsmedia.com/documentation/soccer)

```php
<?php

// This file is generated by Composer
require_once 'vendor/autoload.php';

$client = new GlobalSportsMedia\Client('http://webpull.globalsportsmedia.com', 'USERNAME', 'PASSWORD');
$client->setCacheDir(__DIR__.'/cache'); // caches the xml responses
$client->setUseCache(true);

try {
    $seasons = $client->api('soccer')->get_seasons(['authorized' => 'yes']);
    foreach ($seasons->competition as $competition) {
        foreach ($competition->season as $season) {
            $matches = $client->api('soccer')->get_matches(
                (int) $season['season_id'],
                'season',
                ['detailed' => 'yes', 'start_date' => date('Y-m-d H:00:00')]
            );
            // process matches...
        }
    }
} catch(\Exception $e) {
    die($e->getMessage());
}
```

Note : all the methods return a SimpleXmlElement object or throw an Exception in case of error.
